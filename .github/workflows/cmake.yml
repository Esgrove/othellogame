name: C++

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/cmake.yml"
      - "cpp/**.cpp"
      - "cpp/**.hpp"
      - "cpp/.clang-format"
      - "cpp/**/CMakeLists.txt"
  pull_request:
    paths:
      - ".github/workflows/cmake.yml"
      - "cpp/**.cpp"
      - "cpp/**.hpp"
      - "cpp/.clang-format"
      - "cpp/**/CMakeLists.txt"

# Cancel previous runs for PRs but not pushes to main
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: cpp

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ccache \
            cmake \
            g++ \
            libssl-dev \
            ninja-build

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install --no-progress ninja openssl
        shell: powershell

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        # cmake and openssl should be installed already
        run: |
          brew install ccache
          brew install llvm
          brew install ninja

      - name: Cache CMake
        uses: actions/cache@v4
        with:
          path: |
            cpp/cmake-build-linux-ninja-release
            cpp/cmake-build-mac-ninja-release
            cpp/cmake-build-windows-ninja-release
            cpp/cmake-build-windows-vs-release
          key: ${{ runner.os }}-cmake-${{ github.sha }}
          restore-keys: ${{ runner.os }}-cmake-

      - name: Build
        run: |
          chmod +x build.sh
          ./build.sh --msvc
        shell: bash

      - name: Test
        run: ./build.sh --msvc --test
        shell: bash

  clang-format:
    # Need to use mac since Ubuntu apt has an old clang-format version
    runs-on: macos-latest
    defaults:
      run:
        working-directory: cpp

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install clang-format
        run: |
          brew update --quiet
          brew install clang-format

      - name: Check formatting
        run: |
          clang-format --version
          clang-format --verbose --style=file --dry-run --Werror $(find . -type f \( -name "*.cpp" -o -name "*.hpp" \))
